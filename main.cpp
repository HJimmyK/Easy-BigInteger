#include "BigInteger.hpp"
#include "BinaryCipherTest.hpp"

auto main(int argument_cout, char* argument_vector[]) -> int
{
	using BigInteger = TwilightDream::BigInteger::BigInteger;

	//AllTestBitset();

	//11111111111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001100100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001100100
	//BigInteger BigIntA(std::string("2135987035920910082279229616932235919179133537347964862161828096540766854433857887501402599587940"), 10);
	//std::cout << (BigIntA).ToString(10) << '\n';
	
	//110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001
	//BigInteger BigIntB(std::string("347376267711948586270712955026063723560490518730763569045299501238602925342721"), 10);
	//std::cout << (BigIntB).ToString(10) << '\n';

	BigInteger BigInt(std::string("110111000011011101100110101010000000011101000100010000110101011101010010111101001100001011111011100110101001011111100111111100101001010000110001101101100110011100100111000101010101101101100011000000101100010000100101101110101100110001001100011110101000010100010000010001111101110000001001010001110011000001010110010010110000100101010001001010000011111111010111001111001001111100110110011111001001111100000110011110101000001100010001011100"), 2);
	
	//110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001
	BigInteger BigInt2(std::string("10011011100011001110100001101001001110010110100010011000111011010011001110111010011001101000010001111000011000110011000101001011000000101000001110101100100010100001001010000001110101101001110000111011100010011110110000010111101010010110100110010110111000100000101111010001011001000000111010100110101011111001010100111110111001010110001001100101001100010111001"), 2);
	std::cout << (BigInt).ToString(10) << '\n';
	std::cout << (BigInt2).ToString(10) << '\n';

	BigInteger BigInt3 = BigInt * BigInt2;
	std::cout << (BigInt3).ToString(10) << '\n';

	//BigInteger BigInt4 = 1;
	//std::cout << (BigInt4).ToString(10) << '\n';
	//std::cout << (BigInt4 << 65).ToString(10) << '\n';
	//std::cout << (BigInt4 >> 65).ToString(10) << '\n';

	//BigInteger BigInt5 = BigInt3 / BigInt2;
	//std::cout << (BigInt5).ToString(10) << '\n';
	//BigInt5 = BigInt3 % BigInt2;
	//std::cout << (BigInt5).ToString(10) << '\n';

	BinaryCipher BinaryCipherInstance;
	BinaryCipherInstance.Test();

	BinaryCipherNaive BinaryCipherNaiveInstance;
	BinaryCipherNaiveInstance.Test();

	return 0;
}
